<?xml version="1.0" encoding="utf-8"?>

<objects xmlns="http://www.springframework.net" >

  <object type="Spring.Objects.Factory.Config.VariablePlaceholderConfigurer, Spring.Core">
    <property name="VariableSources">
      <list>
        
        <!-- From a custom config section: -->
        <object type="Spring.Objects.Factory.Config.ConfigSectionVariableSource, Spring.Core">
          <property name="SectionNames" value="DonConfiguration" />
        </object>

        <!-- From traditional appSettings entry: -->
        <object type="Spring.Objects.Factory.Config.ConfigSectionVariableSource, Spring.Core">
          <property name="SectionNames" value="appSettings" />
        </object>

        <!-- 
        Alternatively, you can specify a single ConfigSectionVariableSource, 
        with multiple sections (seperate using "," no spaces): 
        -->
        <object type="Spring.Objects.Factory.Config.ConfigSectionVariableSource, Spring.Core">
          <property name="SectionNames" value="DonConfiguration,appSettings" />
        </object>

        <!-- From .net's ApplicationSettings: -->
        <object type="Spring.Objects.Factory.Config.ConfigSectionVariableSource, Spring.Core">
          <property name="SectionNames" value="applicationSettings/Spring.IocQuickStart.Properties.Settings" />
        </object>

        <!-- TODO: check if this actually reads from user settings, or always returns the default from app.config -->
        <!-- From .net's UserSettings: -->
        <object type="Spring.Objects.Factory.Config.ConfigSectionVariableSource, Spring.Core">
          <property name="SectionNames" value="userSettings/Spring.IocQuickStart.Properties.Settings" />
        </object>

        <!-- From a Java-style properties file: -->
        <object type="Spring.Objects.Factory.Config.PropertyFileVariableSource, Spring.Core">
          <property name="Location" value="~\VariableSources\application.properties" />
          <property name="IgnoreMissingResources" value="true"/>
        </object>
        
        <!-- From commandline arguments: -->
        <object type="Spring.Objects.Factory.Config.CommandLineArgsVariableSource, Spring.Core">
          <property name="ArgumentPrefix" value ="/" /> <!-- optional; default: "/" -->
          <property name="ValueSeparator" value=":" />  <!-- optional; default: ":" -->
        </object>
        
        <!-- From the registry: -->
        <object type="Spring.Objects.Factory.Config.RegistryVariableSource, Spring.Core">
          <property name="Key" value="HKEY_CURRENT_USER\SpringIocQuickStartVariableSources" />
        </object>

        <!-- From System.Environment.GetEnvironmentVariable(): -->
        <object type="Spring.Objects.Factory.Config.EnvironmentVariableSource, Spring.Core">

        </object>

        <!-- From a custom name-value collection: -->
        <object type="Spring.Objects.Factory.Config.ConfigurableVariableSource, Spring.Core">
          <property name="Variables">
            <name-values>
              <add key="midge_name" value="Midge Daniels"/>
              <add key="midge_age" value="33"/>
            </name-values>
          </property>
        </object>

        <!-- From .net's connection strings configuration section: -->
        <object type="Spring.Objects.Factory.Config.ConnectionStringsVariableSource, Spring.Core" />

        <!-- Retrieve the full path for some special folders: -->
        <object type="Spring.Objects.Factory.Config.SpecialFolderVariableSource, Spring.Core" />
        
      </list>
    </property>
  </object>
   
  <object id="people" type="System.Collections.Generic.List&lt;Example.Person>, mscorlib">
    <constructor-arg>
      <list element-type="Example.Person, Spring.IocQuickStart.VariableSources">
        
        <object type="Example.Person, Spring.IocQuickStart.VariableSources">
          <property name="Name" value="${don_name}" />
          <property name="Age" value="${don_age}" />
        </object>

        <object type="Example.Person, Spring.IocQuickStart.VariableSources">
          <property name="Name" value="${betty_name}" />
          <property name="Age" value="${betty_age}" />
        </object>

        <object type="Example.Person, Spring.IocQuickStart.VariableSources">
          <property name="Name" value="${peggy_name}" />
          <property name="Age" value="${peggy_age}" />
        </object>

        <object type="Example.Person, Spring.IocQuickStart.VariableSources">
          <property name="Name" value="${peter_name}" />
          <property name="Age" value="${peter_age}" />
        </object>

        <object type="Example.Person, Spring.IocQuickStart.VariableSources">
          <property name="Name" value="${joan_name}" />
          <property name="Age" value="${joan_age}" />
        </object>

        <object type="Example.Person, Spring.IocQuickStart.VariableSources">
          <property name="Name" value="${freddy_name}" />
          <property name="Age" value="${freddy_age}" />
        </object>

        <object type="Example.Person, Spring.IocQuickStart.VariableSources">
          <property name="Name" value="${ken_name}" />
          <property name="Age" value="${ken_age}" />
        </object>

        <object type="Example.Person, Spring.IocQuickStart.VariableSources">
          <property name="Name" value="${midge_name}" />
          <property name="Age" value="${midge_age}" />
        </object>

        <!-- 
        Note: this requires adding the following commandline parameters:
        "/roger_name:Roger /roger_age:57"  
        -->
        <object type="Example.Person, Spring.IocQuickStart.VariableSources">
          <property name="Name" value="${roger_name}" />
          <property name="Age" value="${roger_age}" />
        </object>

      </list>
    </constructor-arg>
  </object>

  <object id="specials" type="Example.Specials, Spring.IocQuickStart.VariableSources">
    <property name="ConnectionString" value="${myConnection.connectionString}" />
    <property name="ProviderName" value="${myConnection.providerName}" />
    
    <!-- System.Environment.SpecialFolder -->
    <property name="SpecialFolder1" value="${Desktop}" />
    <property name="SpecialFolder2" value="${ProgramFiles}" />


  </object>
  
</objects>